/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import BACKEND.CLASS.Dokter;
import BACKEND.CLASS.Pasien;
import BACKEND.DBConnection;
import java.awt.Component;
import java.awt.JobAttributes;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ivalshamkya
 */
public class PasienPage extends javax.swing.JFrame {
    private Pasien pasien;
    private Connection conn;
    /**
     * Creates new form PasienPage
     */
    public PasienPage(Pasien pasien) {
        this.pasien = pasien;
        initComponents();
        loadDokterDataFromDatabase();
        reminder();
        panelBooking.setVisible(false);
        panelTagihan.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        panelBooking = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        tfBookTanggal = new javax.swing.JTextField();
        tfBookWaktu = new javax.swing.JTextField();
        btnBook = new javax.swing.JButton();
        cbBookDokter = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cbxAsuransi = new javax.swing.JCheckBox();
        panelTagihan = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tablePembayaran = new javax.swing.JTable();
        btnBuatTagihan = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        tfTagihanID = new javax.swing.JTextField();
        cbMetodePembayaran = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        menuBooking = new javax.swing.JMenuItem();
        menuTagihan = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        menuLogout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setSize(new java.awt.Dimension(800, 500));

        jLayeredPane1.setBackground(new java.awt.Color(255, 255, 255));
        jLayeredPane1.setPreferredSize(new java.awt.Dimension(800, 500));
        jLayeredPane1.setSize(new java.awt.Dimension(800, 500));

        panelBooking.setBackground(new java.awt.Color(255, 255, 255));
        panelBooking.setPreferredSize(new java.awt.Dimension(800, 500));

        jLabel3.setText("Tanggal (YYYY-MM-DD)");

        jLabel4.setText("Waktu (HH:MM)");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 0, 21)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Form Booking Pertemuan");

        tfBookTanggal.setToolTipText("Nama");

        tfBookWaktu.setToolTipText("Nomor Telp.");
        tfBookWaktu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfBookWaktuActionPerformed(evt);
            }
        });

        btnBook.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        btnBook.setText("Book");
        btnBook.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBookActionPerformed(evt);
            }
        });

        cbBookDokter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbBookDokterActionPerformed(evt);
            }
        });

        jLabel5.setText("Dokter");

        cbxAsuransi.setText("Include Asuransi?");
        cbxAsuransi.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxAsuransiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBookingLayout = new javax.swing.GroupLayout(panelBooking);
        panelBooking.setLayout(panelBookingLayout);
        panelBookingLayout.setHorizontalGroup(
            panelBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBookingLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBookingLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBookingLayout.createSequentialGroup()
                        .addGap(0, 253, Short.MAX_VALUE)
                        .addGroup(panelBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(panelBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabel3)
                                .addComponent(tfBookTanggal)
                                .addComponent(jLabel4)
                                .addComponent(tfBookWaktu)
                                .addComponent(cbBookDokter, 0, 303, Short.MAX_VALUE))
                            .addComponent(cbxAsuransi))
                        .addGap(238, 238, 238))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBookingLayout.createSequentialGroup()
                .addContainerGap(373, Short.MAX_VALUE)
                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(346, 346, 346))
        );
        panelBookingLayout.setVerticalGroup(
            panelBookingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBookingLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfBookTanggal, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfBookWaktu, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbBookDokter, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbxAsuransi)
                .addGap(18, 18, 18)
                .addComponent(btnBook, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(112, 112, 112))
        );

        panelTagihan.setBackground(new java.awt.Color(255, 255, 255));
        panelTagihan.setPreferredSize(new java.awt.Dimension(800, 500));

        jLabel18.setFont(new java.awt.Font("Helvetica Neue", 0, 24)); // NOI18N
        jLabel18.setText("Tagihan");

        jLabel19.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        jLabel19.setText("Tagihan anda");

        tablePembayaran.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tablePembayaran.setSize(new java.awt.Dimension(452, 80));
        jScrollPane5.setViewportView(tablePembayaran);

        btnBuatTagihan.setText("Bayar");
        btnBuatTagihan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuatTagihanActionPerformed(evt);
            }
        });

        jLabel22.setText("ID Reservasi");

        jLabel23.setText("Total Bayar");

        tfTagihanID.setEnabled(false);

        cbMetodePembayaran.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cash", "Bank Transfer" }));

        javax.swing.GroupLayout panelTagihanLayout = new javax.swing.GroupLayout(panelTagihan);
        panelTagihan.setLayout(panelTagihanLayout);
        panelTagihanLayout.setHorizontalGroup(
            panelTagihanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTagihanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTagihanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelTagihanLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelTagihanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel22)
                            .addComponent(btnBuatTagihan)
                            .addComponent(jLabel23)
                            .addComponent(tfTagihanID)
                            .addComponent(cbMetodePembayaran, 0, 167, Short.MAX_VALUE))
                        .addGap(0, 29, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelTagihanLayout.setVerticalGroup(
            panelTagihanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTagihanLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTagihanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelTagihanLayout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfTagihanID, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbMetodePembayaran, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnBuatTagihan)))
                .addContainerGap())
        );

        jLayeredPane1.setLayer(panelBooking, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(panelTagihan, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelBooking, javax.swing.GroupLayout.DEFAULT_SIZE, 803, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelTagihan, javax.swing.GroupLayout.PREFERRED_SIZE, 815, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(panelBooking, javax.swing.GroupLayout.DEFAULT_SIZE, 498, Short.MAX_VALUE)
                    .addContainerGap()))
            .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jLayeredPane1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(panelTagihan, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jMenu1.setText("Action");

        menuBooking.setText("Booking");
        menuBooking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBookingActionPerformed(evt);
            }
        });
        jMenu1.add(menuBooking);

        menuTagihan.setText("Tagihan");
        menuTagihan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuTagihanActionPerformed(evt);
            }
        });
        jMenu1.add(menuTagihan);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Logout");

        menuLogout.setText("Logout");
        menuLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLogoutActionPerformed(evt);
            }
        });
        jMenu3.add(menuLogout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(8, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLayeredPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tfBookWaktuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfBookWaktuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfBookWaktuActionPerformed

    private void btnBookActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBookActionPerformed
        try {
            conn = new DBConnection().getConnection();
            String tanggal = tfBookTanggal.getText();
            String waktu = tfBookWaktu.getText();
            Dokter dokter = (Dokter) cbBookDokter.getSelectedItem();
            int asuransi = 0;
            if(this.cbxAsuransi.isSelected()) {
                asuransi =  1;
            }
            String query = "INSERT INTO `Reservasi` (`id_pasien`, `id_dokter`, `asuransi`, `tanggal`, `waktu`) "
                    + "VALUES (?,?,?,?,?)";
            try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                preparedStatement.setInt(1, pasien.getID());
                preparedStatement.setInt(2, Integer.parseInt(dokter.getId()));
                preparedStatement.setInt(3, asuransi);
                preparedStatement.setString(4, tanggal);
                preparedStatement.setString(5, waktu);

                int rowAffected = preparedStatement.executeUpdate();

                conn.close();
                if (rowAffected > 0) {
                    JOptionPane.showMessageDialog(null, "Reservasi berhasil!");
                } else {
                    JOptionPane.showMessageDialog(null, "Reservasi gagal!");
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }//GEN-LAST:event_btnBookActionPerformed

    private void menuBookingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBookingActionPerformed
        // TODO add your handling code here:
        loadDokterDataFromDatabase();
        panelBooking.setVisible(true);
        panelTagihan.setVisible(false);
    }//GEN-LAST:event_menuBookingActionPerformed

    private void cbBookDokterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbBookDokterActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbBookDokterActionPerformed

    private void btnBuatTagihanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuatTagihanActionPerformed
        // TODO add your handling code here:
        try {
            String id = this.tfTagihanID.getText();
            String bayar = this.cbMetodePembayaran.getSelectedItem().toString();
            conn = new DBConnection().getConnection();
            String query = "UPDATE `Pembayaran`SET `metode_pembayaran`=? WHERE `id_pembayaran` = ?";
            try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                preparedStatement.setString(1, bayar);
                preparedStatement.setInt(2, Integer.parseInt(id));

                int rowAffected = preparedStatement.executeUpdate();

                if (rowAffected > 0) {
                    loadTagihanDataFromDatabase();
                    this.tfTagihanID.setText("");
                    JOptionPane.showMessageDialog(null, "Tagihan berhasil dibayar!");
                } else {
                    JOptionPane.showMessageDialog(null, "Tagihan gagal dibayar!");
                }
                conn.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(LoginPasien.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuatTagihanActionPerformed

    private void menuTagihanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuTagihanActionPerformed
        // TODO add your handling code here:
        loadTagihanDataFromDatabase();
        panelBooking.setVisible(false);
        panelTagihan.setVisible(true);
    }//GEN-LAST:event_menuTagihanActionPerformed

    private void menuLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLogoutActionPerformed
        // TODO add your handling code here:
        new MainPage().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_menuLogoutActionPerformed

    private void cbxAsuransiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxAsuransiActionPerformed
        // TODO add your handling code here:
        if(this.cbxAsuransi.isSelected()) {
            JOptionPane.showMessageDialog(null, "Dengan memilih opsi 'Include Asuransi', Anda akan mendapatkan perlindungan tambahan.", "Informasi", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_cbxAsuransiActionPerformed

    private void loadDokterDataFromDatabase() {
        
        DefaultComboBoxModel<Dokter> comboBoxModel = getDokterDataFromDatabase();
        cbBookDokter.setModel(comboBoxModel);

        // Use a custom renderer to display the names in the JComboBox
        cbBookDokter.setRenderer(new DefaultListCellRenderer() {
            @Override
            public Component getListCellRendererComponent(JList<?> list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
                super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
                if (value instanceof Dokter) {
                    Dokter dokter = (Dokter) value;
                    setText(dokter.getNama() + " - " + dokter.getSpesialis());
                }
                return this;
            }
        });

    }

    private DefaultComboBoxModel<Dokter> getDokterDataFromDatabase() {
        try {
            // Query to select data from the Dokter table
            Connection conn = new DBConnection().getConnection();
            String query = "SELECT * FROM Dokter";
            PreparedStatement statement = conn.prepareStatement(query);
            ResultSet resultSet = statement.executeQuery();

            // Create a DefaultComboBoxModel to hold the dokter data
            DefaultComboBoxModel<Dokter> comboBoxModel = new DefaultComboBoxModel<>();

            // Add items to the model with data from the result set
            while (resultSet.next()) {
                String idDokter = resultSet.getString("id_dokter");
                String namaDokter = resultSet.getString("nama_dokter");
                String spesialis = resultSet.getString("spesialis");
                Dokter dokter = new Dokter(idDokter, namaDokter, spesialis);
                comboBoxModel.addElement(dokter);
            }

            return comboBoxModel;

        } catch (SQLException e) {
            e.printStackTrace();
            // Handle exceptions
        }

        return null;
    }

    private DefaultTableModel getReservasiDataFromDatabase() {

        try {
            conn = new DBConnection().getConnection();
            String query = "SELECT * FROM Reservasi LEFT JOIN dokter using(id_dokter) LEFT JOIN pasien USING(id_pasien) WHERE id_pasien = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, pasien.getID());
            ResultSet resultSet = statement.executeQuery();

           
            DefaultTableModel model = new DefaultTableModel();

            
            model.addColumn("ID Reservasi");
            model.addColumn("Nama Pasien");
            model.addColumn("Nama Dokter");
            model.addColumn("Tanggal");
            model.addColumn("Waktu");
            model.addColumn("Status");

            
            while (resultSet.next()) {
                String status = resultSet.getString("status").equalsIgnoreCase("0") ? "Belum Terkonfirmasi" : "Terkonfirmasi";
                Object[] row = {resultSet.getInt("id_reservasi"), resultSet.getString("nama_pasien"), resultSet.getString("nama_dokter"), resultSet.getString("tanggal"), resultSet.getString("waktu"), status};
                model.addRow(row);
            }
            return model;
        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }
    
    
    private void reminder(){
        try {
            Connection conn = new DBConnection().getConnection();

            String query = "SELECT * FROM Reservasi WHERE id_pasien = ? AND status == '0'";
            try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                preparedStatement.setInt(1, pasien.getID());

                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    JOptionPane.showMessageDialog(null, "Pengingat bahwa anda memiliki janji temu", "Reminder", JOptionPane.INFORMATION_MESSAGE);
                    conn.close();
                }
            }

            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        
        try {
            Connection conn = new DBConnection().getConnection();

            String query = "SELECT * FROM Reservasi WHERE id_pasien = ? AND status == '1'";
            try (PreparedStatement preparedStatement = conn.prepareStatement(query)) {
                preparedStatement.setInt(1, pasien.getID());

                ResultSet resultSet = preparedStatement.executeQuery();

                if (resultSet.next()) {
                    JOptionPane.showMessageDialog(null, "Pengingat untuk konsumsi obat", "Reminder", JOptionPane.INFORMATION_MESSAGE);
                    conn.close();
                }
            }

            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void loadTagihanDataFromDatabase() {
        tablePembayaran.setModel(getTagihanDataFromDatabase());
        tablePembayaran.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tablePembayaran.getSelectedRow();
                    if (selectedRow != -1) {
                        String id = tablePembayaran.getValueAt(selectedRow, 0).toString();
                        tfTagihanID.setText(id);
                    }
                }
            }
        });
    }

    private DefaultTableModel getTagihanDataFromDatabase() {

        try {
            conn = new DBConnection().getConnection();
            String query = "SELECT * FROM Pembayaran as pb LEFT JOIN Reservasi as rv USING(id_reservasi) LEFT JOIN Pasien USING(id_pasien) LEFT JOIN Dokter USING(id_dokter) WHERE id_pasien = ?";
            PreparedStatement statement = conn.prepareStatement(query);
            statement.setInt(1, pasien.getID());
            ResultSet resultSet = statement.executeQuery();

            DefaultTableModel model = new DefaultTableModel();

            model.addColumn("ID Pembayaran");
            model.addColumn("Nama Pasien");
            model.addColumn("Nama Dokter");
            model.addColumn("Jumlah");
            model.addColumn("Metode Pembayaran");
            model.addColumn("Tanggal");
            model.addColumn("Status");

            while (resultSet.next()) {
                String metode = resultSet.getString("metode_pembayaran") != null ? resultSet.getString("metode_pembayaran") : "-";
                String status = metode.equalsIgnoreCase("-") ? "Belum Bayar" : "Sudah Bayar";
                Object[] row = {
                    resultSet.getInt("id_pembayaran"), 
                    resultSet.getString("nama_pasien"), 
                    resultSet.getString("nama_dokter"), 
                    resultSet.getInt("pb.jumlah"),
                    metode,
                    resultSet.getString("tanggal"),
                    status, 
                };
                model.addRow(row);
            }

            return model;

        } catch (SQLException e) {
            e.printStackTrace();
        }

        return null;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBook;
    private javax.swing.JButton btnBuatTagihan;
    private javax.swing.JComboBox<Dokter> cbBookDokter;
    private javax.swing.JComboBox<String> cbMetodePembayaran;
    private javax.swing.JCheckBox cbxAsuransi;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JMenuItem menuBooking;
    private javax.swing.JMenuItem menuLogout;
    private javax.swing.JMenuItem menuTagihan;
    private javax.swing.JPanel panelBooking;
    private javax.swing.JPanel panelTagihan;
    private javax.swing.JTable tablePembayaran;
    private javax.swing.JTextField tfBookTanggal;
    private javax.swing.JTextField tfBookWaktu;
    private javax.swing.JTextField tfTagihanID;
    // End of variables declaration//GEN-END:variables
}
